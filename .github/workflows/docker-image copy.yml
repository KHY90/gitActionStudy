# name: Auto Merge, Build, and Deploy to Docker Hub

# on:
#   schedule:
#     - cron: '05 3 * * *' # 매일 자정 00:00 (한국 시간, UTC+9 기준)
#   workflow_dispatch: # 수동 실행 가능

# permissions:
#   contents: write
#   pull-requests: write

# jobs:
#   auto_merge_build_deploy:
#     runs-on: ubuntu-latest
#     outputs:
#       has_new_commits: ${{ env.has_new_commits }}

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # Git 설정
#       - name: Configure Git
#         env:
#           GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
#           GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
#         run: |
#           git config --global user.email "$GIT_USER_EMAIL"
#           git config --global user.name "$GIT_USER_NAME"

#       # feat/* 브랜치에서 dev 브랜치에 새 커밋이 있는지 확인
#       - name: Check for new commits in feat/* branches
#         id: check_commits
#         run: |
#           git fetch --all
#           NEW_COMMITS_COUNT=$(git rev-list --count --remotes="origin/feat/*" --not origin/dev)
#           echo "Number of new commits in feat/* branches: $NEW_COMMITS_COUNT"
#           if [ "$NEW_COMMITS_COUNT" -eq 0 ]; then
#             echo "No new commits in feat/* branches."
#             echo "has_new_commits=false" >> $GITHUB_ENV
#           else
#             echo "Found new commits in feat/* branches."
#             echo "has_new_commits=true" >> $GITHUB_ENV
#           fi

#       # 각 feat/* 브랜치의 변경 사항을 dev 브랜치로 PR 생성 또는 기존 PR 확인 후 병합
#       - name: Create or Find PRs from feat/* branches to dev
#         if: env.has_new_commits == 'true'
#         env:
#           GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
#         run: |
#           echo "Attempting to create or find PRs from feat/* branches to dev."
#           git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
#             TARGET_BRANCH=${TARGET_BRANCH#origin/} # Remove 'origin/' prefix
#             echo "Processing branch: $TARGET_BRANCH"
            
#             PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
#             if [ -z "$PR_URL" ]; then
#               PR_URL=$(gh pr create --base dev --head "$TARGET_BRANCH" --title "Auto merge $TARGET_BRANCH into dev" --body "자동 생성된 Pull Request" || echo "")
#               echo "PR created: $PR_URL"
#             else
#               echo "Existing PR found: $PR_URL"
#             fi
#             echo "PR_URL=$PR_URL" >> $GITHUB_ENV
#           done

#       # 모든 PR 자동 병합 (feat/* 브랜치 유지)
#       - name: Auto-merge pull requests
#         if: env.has_new_commits == 'true'
#         env:
#           GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
#         run: |
#           echo "Merging all open PRs from feat/* to dev."
#           git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
#             TARGET_BRANCH=${TARGET_BRANCH#origin/} # Remove 'origin/' prefix
#             PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
#             if [ -n "$PR_URL" ]; then
#               echo "Merging PR: $PR_URL"
#               gh pr merge "$PR_URL" --merge || echo "Merge failed for $PR_URL."
#             else
#               echo "No PR found for $TARGET_BRANCH to dev. Skipping merge."
#             fi
#           done

#       # Docker 빌드 및 Docker Hub 푸시
#       - name: Log in to Docker Hub
#         if: env.has_new_commits == 'true'
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image to Docker Hub
#         if: env.has_new_commits == 'true'
#         run: |
#           git fetch origin dev
#           git checkout dev
#           git pull origin dev  # 최신 dev 브랜치 가져오기
          
#           # Docker 빌드
#           docker build -t narrativa_front .
#           docker tag narrativa_front:latest ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest

#   deploy_local:
#     runs-on: self-hosted
#     needs: auto_merge_build_deploy
#     if: needs.auto_merge_build_deploy.outputs.has_new_commits == 'true'
#     steps:
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Set execution policy to allow scripts to run
#         shell: powershell
#         run: |
#           Set-ExecutionPolicy RemoteSigned -Scope Process -Force
#           Write-Output "Execution policy set to RemoteSigned"

#       - name: Remove existing Docker container and image
#         shell: powershell
#         run: |
#           try {
#             docker stop narrativa_front
#             Write-Output "Successfully stopped container narrativa_front"
#           } catch {
#             Write-Output "Error stopping container: $_"
#           }

#           try {
#             docker rm narrativa_front
#             Write-Output "Successfully removed container narrativa_front"
#           } catch {
#             Write-Output "Error removing container: $_"
#           }

#           try {
#             docker rmi ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
#             Write-Output "Successfully removed image narrativa_front:latest"
#           } catch {
#             Write-Output "Error removing image: $_"
#           }

#           exit 0  # 오류 발생 여부에 관계없이 성공으로 간주

#       - name: Pull Docker image from Docker Hub and run container
#         shell: powershell
#         run: |
#           try {
#             docker pull ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
#             Write-Output "Successfully pulled the latest image from Docker Hub"
#           } catch {
#             Write-Output "Error pulling image from Docker Hub: $_"
#             exit 1  # 중요한 단계이므로 실패 시 exit 1로 설정
#           }

#           try {
#             docker run -d -p 3010:3010 --name narrativa_front ${{ secrets.DOCKER_USERNAME }}/narrativa_front:latest
#             Write-Output "Successfully started container narrativa_front"
#           } catch {
#             Write-Output "Error starting container: $_"
#             exit 1  # 중요한 단계이므로 실패 시 exit 1로 설정
#           }

